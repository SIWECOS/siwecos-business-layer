#!/usr/bin/perl
use strict;
use warnings;
use POSIX;
use FindBin qw($Bin $Script);
use utf8;

binmode(STDOUT, ":utf8");

my $TRANSLATIONS= "$Bin/translations";
my $LANGUAGE_DIR= "$Bin/lang";
my $LANGUAGE_FILE="siwecos.php";
my $TEMPLATEFILE= "$Bin/$Script.txt";

# Expected headers
my $BACKGROUND   = 'Background';
my $CATEGORY     = 'Category';
my $COMMENT      = 'Comment';
my $CONSEQUENCE  = 'Consequence';
my $DESCRIPTION  = 'Description';
my $DETAILS      = 'Details';
my $HEADLINE     = 'Headline';
my $IMPACT       = 'Impact';
my $LINK         = 'Link';
my $ERROR_TEXT   = 'Negative';
my $SUCCESS_TEXT = 'Positive';
my $TIPP         = 'Solution_Tips';
my $TECHNICAL    = 'Technical';

my %CLEAN= (
    $BACKGROUND   => \&trim_escape,
    $CATEGORY     => \&no_linefeeds,
    $COMMENT      => \&trim_escape,
    $CONSEQUENCE  => \&trim_escape,
    $DESCRIPTION  => \&trim_escape,
    $DETAILS      => \&trim_escape,
    $HEADLINE     => \&trim_escape,
    $IMPACT       => \&trim_escape,
    $LINK         => \&wiki_link,
    $ERROR_TEXT   => \&trim_escape,
    $SUCCESS_TEXT => \&trim_escape,
    $TIPP         => \&trim_escape,
    $TECHNICAL    => \&trim_escape,
);

# Prepare some output stuff
my @SUFFIX;
my %SUFFIX;
my $fill= 0;
my $v=0;
foreach (
    $HEADLINE     => '',
    $SUCCESS_TEXT => 'SUCCESS',
    $ERROR_TEXT   => 'ERROR',
    $DESCRIPTION  => 'ERROR_DESC',
    $TIPP         => 'TIPS',
    $LINK         => 'LINK',
) {
    if ($v) {
        my $suffix= $_;
        $suffix= "_$_" if $_;
        $SUFFIX{$SUFFIX[$#SUFFIX]}= $suffix;
        my $l= length $suffix;
        $fill= $l if $l > $fill;
    } else {
        push @SUFFIX, $_;
    }
    $v= 1-$v;
}

my $WIKI= 'https://siwecos.de/wiki';

my %replace= (
    "\\" => "\\\\",
    "\n" => "\\n",
    "'"  => "\\'",
);
my $replace= qr/(\\|\n|')/;

# First prepare the template
open my $template, '<', $TEMPLATEFILE or die "Cannot read template $0.txt: $!\n";
my @template= <$template>;
close $template;



chdir $TRANSLATIONS or die "Cannot change directory to $TRANSLATIONS: $!\n";
# get all translation filenames
# Directory structure is $TRANSLATIONS / placeholder / purpose / language ".txt"
# Also collect categories
my $language_data= {};
my $categories= {};
while (<*/*/*.txt>) {
    # Split pathname into parts
    my ($placeholder, $purpose, $lang)= split m#/#, $_, 3;
    # remove filename extension
    $lang=~ s#\.[^./]+$##;
    # Read the file
    if( open my $trans, '<', $_ ) {
        binmode($trans, ":utf8");
        # into our data structures
        my $text= do {
            local $/;
            <$trans>;
        };
        my $clean= $CLEAN{$purpose};
        if( $clean ) {
            $text= $clean->($text);
        } else {
            $CLEAN{$purpose}= \&trim_escape;
            warn "Unknown purpose: $purpose used in $placeholder.\n";
        }
        if( $purpose eq "Category" ) {
            $language_data->{$lang}->{$placeholder} ||= {};
            $categories->{$lang}->{$text}->{$placeholder}= $language_data->{$lang}->{$placeholder};
        } else {
            $language_data->{$lang}->{$placeholder}->{$purpose}= $text;
        }
    }
    else {
        warn "Can't read $_: $!";
    }
}

if ( -e $LANGUAGE_DIR ) {
    rename $LANGUAGE_DIR, $LANGUAGE_DIR . "_" . strftime("%Y-%m-%d_%H-%M-%S", localtime time);
}
mkdir "$LANGUAGE_DIR" or die "Failed to create directory $LANGUAGE_DIR: $!\n";

foreach my $language (keys %$categories) {
    my $cats= $categories->{$language};
    mkdir "$LANGUAGE_DIR/$language" or die "Failed to create directory $LANGUAGE_DIR/$language: $!\n";
    open my $out, '>', "$LANGUAGE_DIR/$language/$LANGUAGE_FILE"
    or die "Failed to create $LANGUAGE_DIR/$language/$LANGUAGE_FILE: $!\n";
    binmode($out, ':utf8');
    foreach (@template) {
		if( m#^(\s*)/\*\s*DATA\s*HERE\s*\*/\s*#)  {
            my $indent= $1;
            foreach my $category (sort keys %$cats) {
                print $out "$indent//\n$indent// Category: $category\n";
                my $placeholders= $cats->{$category};
                foreach my $placeholder (sort keys %$placeholders){
                    print $out "$indent//\n$indent// $placeholder\n";
                    my $p= $placeholders->{$placeholder};
                    foreach my $purpose (@SUFFIX) {
                        my $text= $p->{$purpose};
                        next unless defined $text;
                        my $suffix= $SUFFIX{$purpose};
                        my $fillstring= ' ' x ($fill - length $suffix);
                        print $out "$indent'$placeholder$suffix'$fillstring => '$text',\n";
                    }
                }
            }
		} else {
    		print $out $_;
		}
	}
}

sub trim {
    local($_)= @_;
    s/^\s+|\s+$//gs;
    return $_;
}

sub trim_escape {
    local($_)= trim(@_);
    s/$replace/$replace{$1}/ge;
    return $_;
}

sub no_whitespace {
    local($_)= trim(@_);
    s/\s+/_/gs;
    return $_;
}

sub no_linefeeds {
    local($_)= trim(@_);
    s/\n/_/gs;
    return $_;
}

sub wiki_link {
    local($_)= no_linefeeds(@_);
    return "$WIKI/$_";
}
